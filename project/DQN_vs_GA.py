{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "017382af-96a2-460d-b558-e3f12a1a3515",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 600/600 [16:17<00:00,  1.63s/it]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Complete\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Execution time: 977.4663231372833 seconds\n"
     ]
    }
   ],
   "source": [
    "import gymnasium as gym\n",
    "import math\n",
    "import random\n",
    "import matplotlib\n",
    "import time\n",
    "import matplotlib.pyplot as plt\n",
    "from collections import namedtuple, deque\n",
    "from itertools import count\n",
    "\n",
    "import torch\n",
    "import torch.nn as nn\n",
    "import torch.optim as optim\n",
    "import torch.nn.functional as F\n",
    "from tqdm import tqdm\n",
    "\n",
    "start_time = time.time()  # Start time\n",
    "\n",
    "# Your code here\n",
    "\n",
    "class DQN(nn.Module):\n",
    "    def __init__(self, n_observations, n_actions):\n",
    "        super(DQN, self).__init__()\n",
    "        self.layer1 = nn.Linear(n_observations, 128)\n",
    "        self.layer2 = nn.Linear(128, 128)\n",
    "        self.layer3 = nn.Linear(128, n_actions)\n",
    "\n",
    "    # Called with either one element to determine next action, or a batch\n",
    "    # during optimization. Returns tensor([[left0exp,right0exp]...]).\n",
    "    def forward(self, x):\n",
    "        x = F.relu(self.layer1(x))\n",
    "        x = F.relu(self.layer2(x))\n",
    "        return self.layer3(x)\n",
    "\n",
    "\n",
    "if __name__ == \"__main__\":\n",
    "    Transition = namedtuple(\"Transition\", (\"state\", \"action\", \"next_state\", \"reward\"))\n",
    "\n",
    "    class ReplayMemory(object):\n",
    "        def __init__(self, capacity):\n",
    "            self.memory = deque([], maxlen=capacity)\n",
    "\n",
    "        def push(self, *args):\n",
    "            \"\"\"Save a transition\"\"\"\n",
    "            self.memory.append(Transition(*args))\n",
    "\n",
    "        def sample(self, batch_size):\n",
    "            return random.sample(self.memory, batch_size)\n",
    "\n",
    "        def __len__(self):\n",
    "            return len(self.memory)\n",
    "\n",
    "    BATCH_SIZE = 128\n",
    "    GAMMA = 0.99\n",
    "    EPS_START = 0.9\n",
    "    EPS_END = 0.05\n",
    "    EPS_DECAY = 1000\n",
    "    TAU = 0.005\n",
    "    LR = 1e-4\n",
    "\n",
    "    device = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n",
    "    env = gym.make(\"CartPole-v1\")\n",
    "\n",
    "    state, info = env.reset()\n",
    "    n_observations = len(state)\n",
    "    n_actions = env.action_space.n\n",
    "\n",
    "    policy_net = DQN(n_observations, n_actions).to(device)\n",
    "    target_net = DQN(n_observations, n_actions).to(device)\n",
    "    target_net.load_state_dict(policy_net.state_dict())\n",
    "\n",
    "    optimizer = optim.AdamW(policy_net.parameters(), lr=LR, amsgrad=True)\n",
    "    memory = ReplayMemory(10000)\n",
    "\n",
    "    steps_done = 0\n",
    "\n",
    "    def select_action(state):\n",
    "        global steps_done\n",
    "        sample = random.random()\n",
    "        eps_threshold = EPS_END + (EPS_START - EPS_END) * math.exp(\n",
    "            -1.0 * steps_done / EPS_DECAY\n",
    "        )\n",
    "        steps_done += 1\n",
    "        if sample > eps_threshold:\n",
    "            with torch.no_grad():\n",
    "                # t.max(1) will return the largest column value of each row.\n",
    "                # second column on max result is index of where max element was\n",
    "                # found, so we pick action with the larger expected reward.\n",
    "                return policy_net(state).max(1).indices.view(1, 1)\n",
    "        else:\n",
    "            return torch.tensor(\n",
    "                [[env.action_space.sample()]], device=device, dtype=torch.long\n",
    "            )\n",
    "\n",
    "    episode_durations = []\n",
    "\n",
    "    def plot_durations(show_result=False):\n",
    "        plt.figure(1)\n",
    "        durations_t = torch.tensor(episode_durations, dtype=torch.float)\n",
    "        if show_result:\n",
    "            plt.title(\"Result\")\n",
    "        else:\n",
    "            plt.clf()\n",
    "            plt.title(\"Training...\")\n",
    "        plt.xlabel(\"Episode\")\n",
    "        plt.ylabel(\"Duration\")\n",
    "        plt.plot(durations_t.numpy())\n",
    "        # Take 100 episode averages and plot them too\n",
    "        if len(durations_t) >= 100:\n",
    "            means = durations_t.unfold(0, 100, 1).mean(1).view(-1)\n",
    "            means = torch.cat((torch.zeros(99), means))\n",
    "            plt.plot(means.numpy())\n",
    "\n",
    "        plt.pause(0.001)  # pause a bit so that plots are updated\n",
    "        # if is_ipython:\n",
    "        #     if not show_result:\n",
    "        #         display.display(plt.gcf())\n",
    "        #         display.clear_output(wait=True)\n",
    "        #     else:\n",
    "        #         display.display(plt.gcf())\n",
    "        #\n",
    "\n",
    "    def optimize_model():\n",
    "        if len(memory) < BATCH_SIZE:\n",
    "            return\n",
    "        transitions = memory.sample(BATCH_SIZE)\n",
    "        # Transpose the batch (see https://stackoverflow.com/a/19343/3343043 for\n",
    "        # detailed explanation). This converts batch-array of Transitions\n",
    "        # to Transition of batch-arrays.\n",
    "        batch = Transition(*zip(*transitions))\n",
    "\n",
    "        # Compute a mask of non-final states and concatenate the batch elements\n",
    "        # (a final state would've been the one after which simulation ended)\n",
    "        non_final_mask = torch.tensor(\n",
    "            tuple(map(lambda s: s is not None, batch.next_state)),\n",
    "            device=device,\n",
    "            dtype=torch.bool,\n",
    "        )\n",
    "        non_final_next_states = torch.cat(\n",
    "            [s for s in batch.next_state if s is not None]\n",
    "        )\n",
    "        state_batch = torch.cat(batch.state)\n",
    "        action_batch = torch.cat(batch.action)\n",
    "        reward_batch = torch.cat(batch.reward)\n",
    "\n",
    "        # Compute Q(s_t, a) - the model computes Q(s_t), then we select the\n",
    "        # columns of actions taken. These are the actions which would've been taken\n",
    "        # for each batch state according to policy_net\n",
    "        state_action_values = policy_net(state_batch).gather(1, action_batch)\n",
    "\n",
    "        # Compute V(s_{t+1}) for all next states.\n",
    "        # Expected values of actions for non_final_next_states are computed based\n",
    "        # on the \"older\" target_net; selecting their best reward with max(1).values\n",
    "        # This is merged based on the mask, such that we'll have either the expected\n",
    "        # state value or 0 in case the state was final.\n",
    "        next_state_values = torch.zeros(BATCH_SIZE, device=device)\n",
    "        with torch.no_grad():\n",
    "            next_state_values[non_final_mask] = (\n",
    "                target_net(non_final_next_states).max(1).values\n",
    "            )\n",
    "        # Compute the expected Q values\n",
    "        expected_state_action_values = (next_state_values * GAMMA) + reward_batch\n",
    "\n",
    "        # Compute Huber loss\n",
    "        criterion = nn.SmoothL1Loss()\n",
    "        loss = criterion(state_action_values, expected_state_action_values.unsqueeze(1))\n",
    "\n",
    "        # Optimize the model\n",
    "        optimizer.zero_grad()\n",
    "        loss.backward()\n",
    "        # In-place gradient clipping\n",
    "        torch.nn.utils.clip_grad_value_(policy_net.parameters(), 100)\n",
    "        optimizer.step()\n",
    "\n",
    "    if torch.cuda.is_available():\n",
    "        num_episodes = 600\n",
    "    else:\n",
    "        num_episodes = 600\n",
    "\n",
    "    for i_episode in tqdm(range(num_episodes)):\n",
    "        # Initialize the environment and get its state\n",
    "        state, info = env.reset()\n",
    "        state = torch.tensor(state, dtype=torch.float32, device=device).unsqueeze(0)\n",
    "        for t in count():\n",
    "            action = select_action(state)\n",
    "            observation, reward, terminated, truncated, _ = env.step(action.item())\n",
    "            reward = torch.tensor([reward], device=device)\n",
    "            done = terminated or truncated\n",
    "\n",
    "            if terminated:\n",
    "                next_state = None\n",
    "            else:\n",
    "                next_state = torch.tensor(\n",
    "                    observation, dtype=torch.float32, device=device\n",
    "                ).unsqueeze(0)\n",
    "\n",
    "            # Store the transition in memory\n",
    "            memory.push(state, action, next_state, reward)\n",
    "\n",
    "            # Move to the next state\n",
    "            state = next_state\n",
    "\n",
    "            # Perform one step of the optimization (on the policy network)\n",
    "            optimize_model()\n",
    "\n",
    "            # Soft update of the target network's weights\n",
    "            # θ′ ← τ θ + (1 −τ )θ′\n",
    "            target_net_state_dict = target_net.state_dict()\n",
    "            policy_net_state_dict = policy_net.state_dict()\n",
    "            for key in policy_net_state_dict:\n",
    "                target_net_state_dict[key] = policy_net_state_dict[\n",
    "                    key\n",
    "                ] * TAU + target_net_state_dict[key] * (1 - TAU)\n",
    "            target_net.load_state_dict(target_net_state_dict)\n",
    "\n",
    "            if done:\n",
    "                episode_durations.append(t + 1)\n",
    "                # plot_durations()\n",
    "                break\n",
    "\n",
    "    print(\"Complete\")\n",
    "    plot_durations(show_result=True)\n",
    "    plt.show()\n",
    "\n",
    "    torch.save(target_net.state_dict(), \"policy_net.pt\")\n",
    "    end_time = time.time()  # End time\n",
    "print(f\"Execution time: {end_time - start_time} seconds\")\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "84bf0e61-e23d-4efb-9836-b26b0db3291b",
   "metadata": {},
   "outputs": [
    {
     "ename": "KeyboardInterrupt",
     "evalue": "",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)",
      "Cell \u001b[1;32mIn[3], line 25\u001b[0m\n\u001b[0;32m     23\u001b[0m \u001b[38;5;28;01mfor\u001b[39;00m time_i \u001b[38;5;129;01min\u001b[39;00m \u001b[38;5;28mrange\u001b[39m(\u001b[38;5;241m500\u001b[39m):\n\u001b[0;32m     24\u001b[0m     action \u001b[38;5;241m=\u001b[39m policy_net(torch\u001b[38;5;241m.\u001b[39mFloatTensor(state, device\u001b[38;5;241m=\u001b[39mdevice))\u001b[38;5;241m.\u001b[39margmax()\u001b[38;5;241m.\u001b[39mitem()\n\u001b[1;32m---> 25\u001b[0m     state, reward, terminated, truncated, info \u001b[38;5;241m=\u001b[39m \u001b[43menv\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mstep\u001b[49m\u001b[43m(\u001b[49m\u001b[43maction\u001b[49m\u001b[43m)\u001b[49m\n\u001b[0;32m     26\u001b[0m     time\u001b[38;5;241m.\u001b[39msleep(\u001b[38;5;241m0.01\u001b[39m)\n\u001b[0;32m     28\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m terminated:\n",
      "File \u001b[1;32m~\\anaconda3\\lib\\site-packages\\gymnasium\\wrappers\\time_limit.py:57\u001b[0m, in \u001b[0;36mTimeLimit.step\u001b[1;34m(self, action)\u001b[0m\n\u001b[0;32m     46\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21mstep\u001b[39m(\u001b[38;5;28mself\u001b[39m, action):\n\u001b[0;32m     47\u001b[0m     \u001b[38;5;124;03m\"\"\"Steps through the environment and if the number of steps elapsed exceeds ``max_episode_steps`` then truncate.\u001b[39;00m\n\u001b[0;32m     48\u001b[0m \n\u001b[0;32m     49\u001b[0m \u001b[38;5;124;03m    Args:\u001b[39;00m\n\u001b[1;32m   (...)\u001b[0m\n\u001b[0;32m     55\u001b[0m \n\u001b[0;32m     56\u001b[0m \u001b[38;5;124;03m    \"\"\"\u001b[39;00m\n\u001b[1;32m---> 57\u001b[0m     observation, reward, terminated, truncated, info \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43menv\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mstep\u001b[49m\u001b[43m(\u001b[49m\u001b[43maction\u001b[49m\u001b[43m)\u001b[49m\n\u001b[0;32m     58\u001b[0m     \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_elapsed_steps \u001b[38;5;241m+\u001b[39m\u001b[38;5;241m=\u001b[39m \u001b[38;5;241m1\u001b[39m\n\u001b[0;32m     60\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_elapsed_steps \u001b[38;5;241m>\u001b[39m\u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_max_episode_steps:\n",
      "File \u001b[1;32m~\\anaconda3\\lib\\site-packages\\gymnasium\\wrappers\\order_enforcing.py:56\u001b[0m, in \u001b[0;36mOrderEnforcing.step\u001b[1;34m(self, action)\u001b[0m\n\u001b[0;32m     54\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_has_reset:\n\u001b[0;32m     55\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m ResetNeeded(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mCannot call env.step() before calling env.reset()\u001b[39m\u001b[38;5;124m\"\u001b[39m)\n\u001b[1;32m---> 56\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43menv\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mstep\u001b[49m\u001b[43m(\u001b[49m\u001b[43maction\u001b[49m\u001b[43m)\u001b[49m\n",
      "File \u001b[1;32m~\\anaconda3\\lib\\site-packages\\gymnasium\\wrappers\\env_checker.py:51\u001b[0m, in \u001b[0;36mPassiveEnvChecker.step\u001b[1;34m(self, action)\u001b[0m\n\u001b[0;32m     49\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m env_step_passive_checker(\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39menv, action)\n\u001b[0;32m     50\u001b[0m \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[1;32m---> 51\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43menv\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mstep\u001b[49m\u001b[43m(\u001b[49m\u001b[43maction\u001b[49m\u001b[43m)\u001b[49m\n",
      "File \u001b[1;32m~\\anaconda3\\lib\\site-packages\\gymnasium\\envs\\classic_control\\cartpole.py:190\u001b[0m, in \u001b[0;36mCartPoleEnv.step\u001b[1;34m(self, action)\u001b[0m\n\u001b[0;32m    187\u001b[0m     reward \u001b[38;5;241m=\u001b[39m \u001b[38;5;241m0.0\u001b[39m\n\u001b[0;32m    189\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mrender_mode \u001b[38;5;241m==\u001b[39m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mhuman\u001b[39m\u001b[38;5;124m\"\u001b[39m:\n\u001b[1;32m--> 190\u001b[0m     \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mrender\u001b[49m\u001b[43m(\u001b[49m\u001b[43m)\u001b[49m\n\u001b[0;32m    191\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m np\u001b[38;5;241m.\u001b[39marray(\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mstate, dtype\u001b[38;5;241m=\u001b[39mnp\u001b[38;5;241m.\u001b[39mfloat32), reward, terminated, \u001b[38;5;28;01mFalse\u001b[39;00m, {}\n",
      "File \u001b[1;32m~\\anaconda3\\lib\\site-packages\\gymnasium\\envs\\classic_control\\cartpole.py:302\u001b[0m, in \u001b[0;36mCartPoleEnv.render\u001b[1;34m(self)\u001b[0m\n\u001b[0;32m    300\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mrender_mode \u001b[38;5;241m==\u001b[39m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mhuman\u001b[39m\u001b[38;5;124m\"\u001b[39m:\n\u001b[0;32m    301\u001b[0m     pygame\u001b[38;5;241m.\u001b[39mevent\u001b[38;5;241m.\u001b[39mpump()\n\u001b[1;32m--> 302\u001b[0m     \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mclock\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mtick\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mmetadata\u001b[49m\u001b[43m[\u001b[49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[38;5;124;43mrender_fps\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[43m]\u001b[49m\u001b[43m)\u001b[49m\n\u001b[0;32m    303\u001b[0m     pygame\u001b[38;5;241m.\u001b[39mdisplay\u001b[38;5;241m.\u001b[39mflip()\n\u001b[0;32m    305\u001b[0m \u001b[38;5;28;01melif\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mrender_mode \u001b[38;5;241m==\u001b[39m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mrgb_array\u001b[39m\u001b[38;5;124m\"\u001b[39m:\n",
      "\u001b[1;31mKeyboardInterrupt\u001b[0m: "
     ]
    }
   ],
   "source": [
    "import time\n",
    "\n",
    "import gymnasium as gym\n",
    "import torch\n",
    "\n",
    "#from project.main import DQN\n",
    "\n",
    "if __name__ == \"__main__\":\n",
    "    device = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n",
    "\n",
    "    env = gym.make(\"CartPole-v1\", render_mode=\"human\")\n",
    "    state, info = env.reset()\n",
    "    n_observations = len(state)\n",
    "    n_actions = env.action_space.n\n",
    "\n",
    "    policy_net = DQN(n_observations, n_actions).to(device)\n",
    "    policy_net.load_state_dict(torch.load(\"policy_net.pt\", map_location=device))\n",
    "\n",
    "    for episode_i in range(10):\n",
    "        state, info = env.reset()\n",
    "        env.render()\n",
    "\n",
    "        for time_i in range(500):\n",
    "            action = policy_net(torch.FloatTensor(state, device=device)).argmax().item()\n",
    "            state, reward, terminated, truncated, info = env.step(action)\n",
    "            time.sleep(0.01)\n",
    "\n",
    "            if terminated:\n",
    "                time.sleep(0.5)\n",
    "                break\n",
    "\n",
    "    env.close()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "21ce42ae-68e4-487c-9b36-cd47fc58b0fb",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Generation: 100%|██████████| 50/50 [00:06<00:00,  7.84it/s]\n",
      "C:\\Users\\16144\\anaconda3\\lib\\site-packages\\gym\\envs\\classic_control\\cartpole.py:211: UserWarning: \u001b[33mWARN: You are calling render method without specifying any render mode. You can specify the render_mode at initialization, e.g. gym(\"CartPole-v1\", render_mode=\"rgb_array\")\u001b[0m\n",
      "  gym.logger.warn(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Best policy rules: [-0.06784741  0.30853465  0.11295829  0.85950907]\n",
      "Episode 1 finished after 500 timesteps with reward 500.0.\n",
      "Episode 2 finished after 500 timesteps with reward 500.0.\n",
      "Episode 3 finished after 500 timesteps with reward 500.0.\n",
      "Episode 4 finished after 500 timesteps with reward 500.0.\n",
      "Episode 5 finished after 500 timesteps with reward 500.0.\n",
      "Execution time: 6.521459102630615 seconds\n"
     ]
    }
   ],
   "source": [
    "#GA implementation\n",
    "import gym\n",
    "import numpy as np\n",
    "from tqdm import tqdm\n",
    "import time \n",
    "start_time = time.time()  # Start time\n",
    "\n",
    "class Policy:\n",
    "    def __init__(self, rules=None):\n",
    "        self.rules = rules if rules is not None else np.random.rand(4) * 2 - 1\n",
    "\n",
    "    def decide_action(self, observation):\n",
    "        return 0 if np.dot(self.rules, observation) < 0 else 1\n",
    "    \n",
    "    def mutate(self, mutation_rate=0.1):\n",
    "        mutation = (np.random.rand(4) * 2 - 1) * mutation_rate\n",
    "        self.rules += mutation\n",
    "def calculate_fitness(policy, env):\n",
    "    reset_return = env.reset()\n",
    "    # Check if the environment's reset method returns a tuple and extract the observation\n",
    "    if isinstance(reset_return, tuple):\n",
    "        observation = reset_return[0]  # Assuming the observation is the first element\n",
    "    else:\n",
    "        observation = reset_return  # Direct assignment if not a tuple\n",
    "\n",
    "    total_reward = 0\n",
    "    for _ in range(1000):\n",
    "        action = policy.decide_action(observation)\n",
    "        step_return = env.step(action)\n",
    "        if isinstance(step_return, tuple) and len(step_return) == 5:\n",
    "            observation, reward, done, truncated, _ = step_return  # Adjusted for environments returning a tuple with 5 elements\n",
    "        elif isinstance(step_return, tuple) and len(step_return) == 4:\n",
    "            observation, reward, done, _ = step_return  # Standard Gym environment return\n",
    "        else:\n",
    "            observation = step_return  # Direct assignment if not a tuple, uncommon case\n",
    "\n",
    "        total_reward += reward\n",
    "        if done or truncated:  # Added 'truncated' to handle environments where an episode can be truncated\n",
    "            break\n",
    "    return total_reward\n",
    "\n",
    "def genetic_algorithm(env, generations=50, population_size=10):\n",
    "    population = [Policy() for _ in range(population_size)]\n",
    "    fitness_scores = []  # Initialize fitness_scores outside the loop\n",
    "    \n",
    "    for _ in tqdm(range(generations), desc=\"Generation\"):\n",
    "        fitness_scores = [calculate_fitness(policy, env) for policy in population]\n",
    "        \n",
    "        sorted_population = sorted(zip(fitness_scores, population), key=lambda x: x[0], reverse=True)\n",
    "        survivors = [policy for _, policy in sorted_population[:population_size // 2]]\n",
    "        \n",
    "        children = []\n",
    "        while len(children) < population_size - len(survivors):\n",
    "            parent1, parent2 = np.random.choice(survivors, 2, replace=False)\n",
    "            child1_rules = (parent1.rules + parent2.rules) / 2\n",
    "            child1 = Policy(child1_rules)\n",
    "            child1.mutate()\n",
    "            children.append(child1)\n",
    "        \n",
    "        population = survivors + children\n",
    "\n",
    "    if population and fitness_scores:\n",
    "        best_fitness = max(fitness_scores)\n",
    "        best_policy_index = fitness_scores.index(best_fitness)\n",
    "        return population[best_policy_index]\n",
    "    else:\n",
    "        return Policy()\n",
    "\n",
    "def play_cartpole_with_policy(env, policy, episodes=5):\n",
    "    for episode in range(episodes):\n",
    "        reset_return = env.reset()\n",
    "        # Check if the environment's reset method returns a tuple and extract the observation\n",
    "        if isinstance(reset_return, tuple):\n",
    "            observation = reset_return[0]  # Assuming the observation is the first element\n",
    "        else:\n",
    "            observation = reset_return  # Direct assignment if not a tuple\n",
    "        \n",
    "        total_reward = 0\n",
    "        for t in range(1000):\n",
    "            env.render()\n",
    "            action = policy.decide_action(observation)\n",
    "            step_return = env.step(action)\n",
    "            if isinstance(step_return, tuple) and len(step_return) == 5:\n",
    "                observation, reward, done, truncated, _ = step_return  # Adjusted for environments returning a tuple with 5 elements\n",
    "            elif isinstance(step_return, tuple) and len(step_return) == 4:\n",
    "                observation, reward, done, _ = step_return  # Standard Gym environment return\n",
    "            else:\n",
    "                observation = step_return  # Direct assignment if not a tuple, uncommon case\n",
    "\n",
    "            total_reward += reward\n",
    "            if done or truncated:  # Added 'truncated' to handle environments where an episode can be truncated\n",
    "                print(f\"Episode {episode+1} finished after {t+1} timesteps with reward {total_reward}.\")\n",
    "                break\n",
    "    env.close()\n",
    "\n",
    "# Initialize the environment and run the genetic algorithm\n",
    "env = gym.make(\"CartPole-v1\")\n",
    "best_policy = genetic_algorithm(env)\n",
    "if best_policy:\n",
    "    print(\"Best policy rules:\", best_policy.rules)\n",
    "    play_cartpole_with_policy(env, best_policy)\n",
    "else:\n",
    "    print(\"Failed to evolve a policy.\")\n",
    "end_time = time.time()  # End time\n",
    "print(f\"Execution time: {end_time - start_time} seconds\")\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "90c8dc4a-5176-4354-aa7d-712e9a048fca",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Cartpole playing using GA\n",
    "import time\n",
    "import gymnasium as gym\n",
    "import numpy as np\n",
    "\n",
    "class Policy:\n",
    "    def __init__(self, rules=None):\n",
    "        # Ensure rules are a numpy array for dot product operation\n",
    "        self.rules = np.array(rules if rules is not None else np.random.rand(4) * 2 - 1)\n",
    "\n",
    "    def decide_action(self, observation):\n",
    "        # Convert observation to numpy array to ensure dot product works correctly\n",
    "        observation = np.array(observation)\n",
    "        return 0 if np.dot(self.rules, observation) < 0 else 1\n",
    "\n",
    "if __name__ == \"__main__\":\n",
    "    env = gym.make(\"CartPole-v1\", render_mode=\"human\")\n",
    "\n",
    "    best_policy = Policy()  # This should be replaced with your actual best policy from GA\n",
    "    \n",
    "    for episode_i in range(100):\n",
    "        observation, info = env.reset()  # Use env.reset() correctly based on gymnasium API\n",
    "\n",
    "        for time_i in range(5000):\n",
    "            env.render()  # Render the environment at the current state\n",
    "            action = best_policy.decide_action(observation)  # Get action from the policy\n",
    "            observation, reward, done, truncated, info = env.step(action)  # Execute the action\n",
    "\n",
    "            time.sleep(0.01)  # Sleep to slow down the loop for visual inspection\n",
    "            if done or truncated:  # Break the loop if the episode is over\n",
    "                break\n",
    "\n",
    "    env.close()  # Close the environment after all episodes are done\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.9"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
